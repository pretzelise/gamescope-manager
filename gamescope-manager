#!/usr/bin/python3

import argparse
import subprocess
import sys
import os
import json

# load config file
home_path = os.path.expanduser('~')
with open(f'{home_path}/.config/gamescope-manager/config.json', 'r') as config_file:
    config_data = json.load(config_file)


def construct_gamescope(config_object):
    output = "gamescope"
    for key, value in config_object.items():
        match key:
            case "env":
                output = f"env {value} " + output
            case "backend":
                output += f" --backend {value}"
            case "resolution_w":
                output += f" -W {value}"
            case "resolution_h":
                output += f" -H {value}"
            case "refresh_rate":
                output += f" -r {value}"
            case "fullscreen":
                if value == True:
                    output += f" -f"
            case "force_grab_cursor":
                if value == True:
                    output += f" --force-grab-cursor"
            case "mangohud":
                if value == True:
                    output += f" --mangoapp"

    return (output + " --")

def run_zenity(config_object):
    zenity_env = os.environ.copy()
    zenity_env["LD_PRELOAD"] = "/usr/lib/libcurl.so"
    zenity_cmd = ["/usr/bin/zenity", "--question", "--switch", "--title", "Gamescope Manager", "--text", "Please select a gamescope mode", "--extra-button", "Quit"]

    for key in reversed(config_object.keys()):
        zenity_cmd.append("--extra-button")
        zenity_cmd.append(key)

    user_choice = subprocess.run(zenity_cmd, env=zenity_env, stdout=subprocess.PIPE)
    return user_choice.stdout.decode('utf-8').strip()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="Gamescope Manager", description="A quick and dirty python script to manage multiple gamescope configurations")
    parser.add_argument('-t', '--tags', nargs="+")
    parser.add_argument('-i', '--include-untagged', action="store_true")

    args = parser.parse_args()
    if (args.include_untagged and args.tags == None):
        parser.error("-i has no effect without specifying tags")

    config_list = {}
    if args.tags != None:
        for key in config_data.keys():
            current_key = config_data.get(key)
            current_tags = current_key.get("tags")

            if current_tags != None:
                if any(x in current_tags for x in args.tags):
                    config_list.update({key: current_key})
            elif args.include_untagged == True:
                config_list.update({key: current_key})
    else:
        for key in config_data.keys():
            current_key = config_data.get(key)
            current_tags = current_key.get("tags")

            if current_tags == None:
                config_list.update({key: current_key})

    config_data = config_list

    user_choice = run_zenity(config_data)

    if user_choice in ["Quit", ""]:
        sys.stdout.write("true") # prepending the 'true' bash built-in is a great solution to cancel a game launch in steam as 'true' will eat all subsequent arguments provided
    else:
        selected_config = config_data.get(user_choice)
        gamescope_output = construct_gamescope(selected_config)
        sys.stdout.write(gamescope_output) # output a properly formatted gamescope command to be passed to steam
